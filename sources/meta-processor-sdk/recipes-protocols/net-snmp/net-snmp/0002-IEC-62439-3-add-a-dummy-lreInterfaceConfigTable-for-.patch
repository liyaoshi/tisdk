From b02dc98e60bd2ab077f27ca6f08c47a49f919b85 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Mon, 8 May 2017 13:11:13 -0400
Subject: [PATCH 02/12] IEC-62439-3: add a dummy lreInterfaceConfigTable for
 hsr/prp mibs

For now just return hard coded values.

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
---
 agent/mibgroup/iec-62439-3-mib.h                   |   1 +
 .../iec-62439-3-mib/lreInterfaceConfigTable.c      | 243 +++++++++++++++++++++
 .../iec-62439-3-mib/lreInterfaceConfigTable.h      |  39 ++++
 3 files changed, 283 insertions(+)
 create mode 100644 agent/mibgroup/iec-62439-3-mib/lreInterfaceConfigTable.c
 create mode 100644 agent/mibgroup/iec-62439-3-mib/lreInterfaceConfigTable.h

diff --git a/agent/mibgroup/iec-62439-3-mib.h b/agent/mibgroup/iec-62439-3-mib.h
index ba32521..40e44cc 100644
--- a/agent/mibgroup/iec-62439-3-mib.h
+++ b/agent/mibgroup/iec-62439-3-mib.h
@@ -3,4 +3,5 @@
  */
 
 config_require(iec-62439-3-mib/lreManufacturerName)
+config_require(iec-62439-3-mib/lreInterfaceConfigTable)
 config_add_mib(IEC-62439-3-MIB)
diff --git a/agent/mibgroup/iec-62439-3-mib/lreInterfaceConfigTable.c b/agent/mibgroup/iec-62439-3-mib/lreInterfaceConfigTable.c
new file mode 100644
index 0000000..3307541
--- /dev/null
+++ b/agent/mibgroup/iec-62439-3-mib/lreInterfaceConfigTable.c
@@ -0,0 +1,243 @@
+/*
+ * Note: this file originally auto-generated by mib2c using
+ *        $
+ */
+
+#include <net-snmp/net-snmp-config.h>
+#include <net-snmp/net-snmp-includes.h>
+#include <net-snmp/agent/net-snmp-agent-includes.h>
+#include "lreInterfaceConfigTable.h"
+
+typedef struct lre_interface_config_table_entry_s {
+    u_long interface_config_index;
+    int row_stats;
+    int node_type;
+    char node_name[128];
+    char version_name[32];
+    char mac_address[32];
+    int port_admin_state_A;
+    int port_admin_state_B;
+    int link_status_A;
+    int link_status_B;
+    int duplicate_discard;
+    int transparent_reception;
+    int hsr_lre_mode;
+    int switching_end_node;
+    int redbox_identity;
+    int evaluate_supervision;
+    int nodes_table_clear;
+    int dup_list_reside_max_time;
+} lre_if_config_table_entry;
+
+static lre_if_config_table_entry default_lre_if_config_table_entry = {
+    0,1,2,{'h','s','r','0','\0'},{'v','e','r','s','i','o','n',' ','1','\0'},
+    {1,2,3,4,5,6,'\0'},1,0,1,0,2,1,3,1,1,1,0,100};
+
+static int if_count = 1;
+/** Initialize the lreInterfaceConfigTable table by defining its contents and how it's structured */
+void
+initialize_table_lreInterfaceConfigTable(void)
+{
+    const oid lreInterfaceConfigTable_oid[] = {1,0,62439,2,21,0,1,0,1};
+    const oid lreInterfaceCount_oid[] = {1,0,62439,2,21,0,0,2};
+    netsnmp_table_data_set *table_set;
+    netsnmp_table_row *row;
+
+    netsnmp_register_scalar(
+        netsnmp_create_handler_registration("lreInterfaceCount", handle_lreInterfaceCount,
+                               lreInterfaceCount_oid, OID_LENGTH(lreInterfaceCount_oid),
+                               HANDLER_CAN_RONLY
+        ));
+
+    /* create the table structure itself */
+    table_set = netsnmp_create_table_data_set("lreInterfaceConfigTable");
+
+    /* comment this out or delete if you don't support creation of new rows */
+    /*
+    table_set->allow_creation = 1;
+    */
+
+    /***************************************************
+     * Adding indexes
+     */
+    DEBUGMSGTL(("initialize_table_lreInterfaceConfigTable",
+                "adding indexes to table lreInterfaceConfigTable\n"));
+    netsnmp_table_set_add_indexes(table_set,
+                           ASN_UNSIGNED,  /* index: lreInterfaceConfigIndex */
+                           0);
+
+    DEBUGMSGTL(("initialize_table_lreInterfaceConfigTable",
+                "adding column types to table lreInterfaceConfigTable\n"));
+    netsnmp_table_set_multi_add_default_row(table_set,
+                                            COLUMN_LREINTERFACECONFIGINDEX, ASN_UNSIGNED, 0,
+                                            NULL, 0,
+                                            COLUMN_LREROWSTATUS, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LRENODETYPE, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LRENODENAME, ASN_OCTET_STR, 1,
+                                            NULL, 0,
+                                            COLUMN_LREVERSIONNAME, ASN_OCTET_STR, 0,
+                                            NULL, 0,
+                                            COLUMN_LREMACADDRESS, ASN_OCTET_STR, 1,
+                                            NULL, 0,
+                                            COLUMN_LREPORTADMINSTATEA, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LREPORTADMINSTATEB, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LRELINKSTATUSA, ASN_INTEGER, 0,
+                                            NULL, 0,
+                                            COLUMN_LRELINKSTATUSB, ASN_INTEGER, 0,
+                                            NULL, 0,
+                                            COLUMN_LREDUPLICATEDISCARD, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LRETRANSPARENTRECEPTION, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LREHSRLREMODE, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LRESWITCHINGENDNODE, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LREREDBOXIDENTITY, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LREEVALUATESUPERVISION, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LRENODESTABLECLEAR, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LREPROXYNODETABLECLEAR, ASN_INTEGER, 1,
+                                            NULL, 0,
+                                            COLUMN_LREDUPLISTRESIDEMAXTIME, ASN_INTEGER, 1,
+                                            NULL, 0,
+                              0);
+
+    /* registering the table with the master agent */
+    /* note: if you don't need a subhandler to deal with any aspects
+       of the request, change lreInterfaceConfigTable_handler to "NULL" */
+    netsnmp_register_table_data_set(netsnmp_create_handler_registration("lreInterfaceConfigTable", lreInterfaceConfigTable_handler,
+                                                        lreInterfaceConfigTable_oid,
+                                                        OID_LENGTH(lreInterfaceConfigTable_oid),
+                                                        HANDLER_CAN_RWRITE),
+                            table_set, NULL);
+
+    /*
+     * create the a row for the table, and add the data
+     */
+    row = netsnmp_create_table_data_row();
+
+    /*
+     * set the index to the 0
+     */
+    netsnmp_table_row_add_index(row, ASN_UNSIGNED,
+		                &default_lre_if_config_table_entry.interface_config_index,
+				sizeof(&default_lre_if_config_table_entry.interface_config_index));
+
+    /* set hardcoded values for now */
+    netsnmp_set_row_column(row, COLUMN_LREROWSTATUS, ASN_INTEGER,
+                           &default_lre_if_config_table_entry.row_stats,
+			   sizeof(default_lre_if_config_table_entry.row_stats));
+    netsnmp_set_row_column(row, COLUMN_LRENODETYPE, ASN_INTEGER,
+                           &default_lre_if_config_table_entry.node_type,
+			   sizeof(default_lre_if_config_table_entry.node_type));
+    netsnmp_set_row_column(row, COLUMN_LRENODENAME, ASN_OCTET_STR,
+			   &default_lre_if_config_table_entry.node_name[0],
+			   strlen(default_lre_if_config_table_entry.node_name));
+    netsnmp_set_row_column(row, COLUMN_LREVERSIONNAME, ASN_OCTET_STR,
+			   &default_lre_if_config_table_entry.version_name[0],
+			   strlen(default_lre_if_config_table_entry.version_name));
+    netsnmp_set_row_column(row, COLUMN_LREMACADDRESS, ASN_OCTET_STR,
+			   &default_lre_if_config_table_entry.mac_address[0], 6);
+    netsnmp_set_row_column(row, COLUMN_LREPORTADMINSTATEA, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.port_admin_state_A,
+			   sizeof(default_lre_if_config_table_entry.port_admin_state_A));
+    netsnmp_set_row_column(row, COLUMN_LREPORTADMINSTATEB, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.port_admin_state_B,
+			   sizeof(default_lre_if_config_table_entry.port_admin_state_B));
+    netsnmp_set_row_column(row, COLUMN_LRELINKSTATUSA, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.link_status_A,
+			   sizeof(default_lre_if_config_table_entry.link_status_A));
+    netsnmp_set_row_column(row, COLUMN_LRELINKSTATUSB, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.link_status_B,
+			   sizeof(default_lre_if_config_table_entry.link_status_B));
+    netsnmp_set_row_column(row, COLUMN_LREDUPLICATEDISCARD, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.duplicate_discard,
+			   sizeof(default_lre_if_config_table_entry.duplicate_discard));
+    netsnmp_set_row_column(row, COLUMN_LRETRANSPARENTRECEPTION, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.transparent_reception,
+			   sizeof(default_lre_if_config_table_entry.transparent_reception));
+    netsnmp_set_row_column(row, COLUMN_LREHSRLREMODE, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.hsr_lre_mode,
+			   sizeof(default_lre_if_config_table_entry.hsr_lre_mode));
+    netsnmp_set_row_column(row, COLUMN_LRESWITCHINGENDNODE, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.switching_end_node,
+			   sizeof(default_lre_if_config_table_entry.switching_end_node));
+    netsnmp_set_row_column(row, COLUMN_LREREDBOXIDENTITY, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.redbox_identity,
+			   sizeof(default_lre_if_config_table_entry.redbox_identity));
+    netsnmp_set_row_column(row, COLUMN_LREEVALUATESUPERVISION, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.evaluate_supervision,
+			   sizeof(default_lre_if_config_table_entry.evaluate_supervision));
+    netsnmp_set_row_column(row, COLUMN_LRENODESTABLECLEAR, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.nodes_table_clear,
+			   sizeof(default_lre_if_config_table_entry.nodes_table_clear));
+    netsnmp_set_row_column(row, COLUMN_LREPROXYNODETABLECLEAR, ASN_INTEGER,
+			   &default_lre_if_config_table_entry.dup_list_reside_max_time,
+			   sizeof(default_lre_if_config_table_entry.dup_list_reside_max_time));
+    /*
+     * add the row to the table
+     */
+    netsnmp_table_dataset_add_row(table_set, row);
+    DEBUGMSGTL(("lreInterfaceConfigTable ", "Done initializing.\n"));
+}
+
+/** Initializes the lreInterfaceConfigTable module */
+void
+init_lreInterfaceConfigTable(void)
+{
+
+  /* here we initialize all the tables we're planning on supporting */
+    initialize_table_lreInterfaceConfigTable();
+}
+
+/** handles requests for the lreInterfaceConfigTable table, if anything else needs to be done */
+int
+lreInterfaceConfigTable_handler(
+    netsnmp_mib_handler               *handler,
+    netsnmp_handler_registration      *reginfo,
+    netsnmp_agent_request_info        *reqinfo,
+    netsnmp_request_info              *requests) {
+    /* perform anything here that you need to do.  The requests have
+       already been processed by the master table_dataset handler, but
+       this gives you chance to act on the request in some other way
+       if need be. */
+    return SNMP_ERR_NOERROR;
+}
+
+int
+handle_lreInterfaceCount(netsnmp_mib_handler *handler,
+                          netsnmp_handler_registration *reginfo,
+                          netsnmp_agent_request_info   *reqinfo,
+                          netsnmp_request_info         *requests)
+{
+    /* We are never called for a GETNEXT if it's registered as a
+       "instance", as it's "magically" handled for us.  */
+
+    printf("handle_lreInterfaceCount");
+    /* a instance handler also only hands us one request at a time, so
+       we don't need to loop over a list of requests; we'll only get one */
+
+    switch(reqinfo->mode) {
+
+        case MODE_GET:
+            snmp_set_var_typed_value(requests->requestvb, ASN_INTEGER,
+                                     &if_count /* XXX: a pointer to the scalar's data */,
+                                     sizeof(if_count) /* XXX: the length of the data in bytes */);
+            break;
+
+
+        default:
+            /* we should never get here, so this is a really bad error */
+            snmp_log(LOG_ERR, "unknown mode (%d) in handle_lreInterfaceCount\n", reqinfo->mode );
+            return SNMP_ERR_GENERR;
+    }
+
+    return SNMP_ERR_NOERROR;
+}
diff --git a/agent/mibgroup/iec-62439-3-mib/lreInterfaceConfigTable.h b/agent/mibgroup/iec-62439-3-mib/lreInterfaceConfigTable.h
new file mode 100644
index 0000000..d26a2ca
--- /dev/null
+++ b/agent/mibgroup/iec-62439-3-mib/lreInterfaceConfigTable.h
@@ -0,0 +1,39 @@
+/*
+ * Note: this file originally auto-generated by mib2c using
+ *  $
+ */
+#ifndef LREINTERFACECONFIGTABLE_H
+#define LREINTERFACECONFIGTABLE_H
+
+/* function declarations */
+void init_lreInterfaceConfigTable(void);
+void initialize_table_lreInterfaceConfigTable(void);
+Netsnmp_Node_Handler lreInterfaceConfigTable_handler;
+
+/* function declarations */
+int handle_lreInterfaceCount(netsnmp_mib_handler *handler,
+                          netsnmp_handler_registration *reginfo,
+                          netsnmp_agent_request_info   *reqinfo,
+                          netsnmp_request_info         *requests);
+
+/* column number definitions for table lreInterfaceConfigTable */
+       #define COLUMN_LREINTERFACECONFIGINDEX		1
+       #define COLUMN_LREROWSTATUS		2
+       #define COLUMN_LRENODETYPE		3
+       #define COLUMN_LRENODENAME		4
+       #define COLUMN_LREVERSIONNAME		5
+       #define COLUMN_LREMACADDRESS		6
+       #define COLUMN_LREPORTADMINSTATEA		7
+       #define COLUMN_LREPORTADMINSTATEB		8
+       #define COLUMN_LRELINKSTATUSA		9
+       #define COLUMN_LRELINKSTATUSB		10
+       #define COLUMN_LREDUPLICATEDISCARD		11
+       #define COLUMN_LRETRANSPARENTRECEPTION		12
+       #define COLUMN_LREHSRLREMODE		13
+       #define COLUMN_LRESWITCHINGENDNODE		14
+       #define COLUMN_LREREDBOXIDENTITY		15
+       #define COLUMN_LREEVALUATESUPERVISION		16
+       #define COLUMN_LRENODESTABLECLEAR		17
+       #define COLUMN_LREPROXYNODETABLECLEAR		18
+       #define COLUMN_LREDUPLISTRESIDEMAXTIME		19
+#endif /* LREINTERFACECONFIGTABLE_H */
-- 
1.9.1

