From c5ff94524949933d152fe1ef62edc724e891c0f8 Mon Sep 17 00:00:00 2001
From: Murali Karicheri <m-karicheri2@ti.com>
Date: Wed, 24 May 2017 12:01:00 -0400
Subject: [PATCH 08/12] IEC-62439-3-MIB: Move existing lre access functions to
 library file.

Add the existing functions to retrieve lre information from Linux kernel
to the lre_config_interface_access.c library file. Also use access
functions instead of hardcoded values in the load function().

Signed-off-by: Murali Karicheri <m-karicheri2@ti.com>
---
 .../lreInterfaceConfigTable_data_access.c          | 389 ++-------------------
 .../IEC-62439-3-MIB/lre_config_interface.h         |  39 +++
 .../IEC-62439-3-MIB/lre_config_interface_access.c  | 324 ++++++++++++++++-
 3 files changed, 382 insertions(+), 370 deletions(-)

diff --git a/agent/mibgroup/IEC-62439-3-MIB/lreInterfaceConfigTable/lreInterfaceConfigTable_data_access.c b/agent/mibgroup/IEC-62439-3-MIB/lreInterfaceConfigTable/lreInterfaceConfigTable_data_access.c
index 28fff22..229c3d5 100644
--- a/agent/mibgroup/IEC-62439-3-MIB/lreInterfaceConfigTable/lreInterfaceConfigTable_data_access.c
+++ b/agent/mibgroup/IEC-62439-3-MIB/lreInterfaceConfigTable/lreInterfaceConfigTable_data_access.c
@@ -13,365 +13,9 @@
 
 /* include our parent header */
 #include "lreInterfaceConfigTable.h"
-
-
 #include "lreInterfaceConfigTable_data_access.h"
+#include "../lre_config_interface.h"
 
-#define lre_interface_raw_file "/var/ip_command_out.txt"
-#define ip_command "ip -d link 1>&2 >/var/ip_command_out.txt\n"
-
-/* for parsing hsr/prp interface parameters */
-enum lre_interface_param_index {
-	INDEX_HSR_PRP_IF_NAME,
-	INDEX_HSR_PRP_MAC_ADDRESS,
-	INDEX_HSR_PRP_SLAVE1_IF_NAME,
-	INDEX_HSR_PRP_SLAVE2_IF_NAME,
-	INDEX_HSR_PRP_LAST
-};
-
-struct lre_node_s {
-	int if_index;
-	char type[16];
-	char if_name[128];
-	char mac_address[32];
-	char slave1_if_name[128];
-        int slave1_admin_state;
-        int slave1_link_state;
-        char slave2_if_name[128];
-        int slave2_admin_state;
-        int slave2_link_state;
-};
-
-struct lre_nodes_s {
-	struct lre_node_s data;
-	struct lre_nodes_s *next;
-};
-
-/* for parsing interface parameters */
-enum lre_iface_param_index {
-	INDEX_IF_NAME,
-	INDEX_ADMIN_STATE,
-	INDEX_LINK_STATE,
-	INDEX_LAST
-};
-
-static int lre_prefix_string_ifindex(const char *line, int *if_index)
-{
-	char str[32];
-	const char *ptr = line;
-	int count = 0;
-
-	bzero(str, sizeof(str));
-	if (!isdigit(*ptr))
-	return 0;
-
-	bzero(str, sizeof(str));
-	while(*ptr && (*ptr != ':')) {
-		if (!isdigit(*ptr))
-			break;
-		count++;
-		ptr++;
-	}
-
-	if (*ptr == ':') {
-		if (count && (count < sizeof(str))) {
-			while (count--) {
-			      str[count] = line[count];
-			}
-		}
-		if (strlen(str)) {
-			*if_index = atoi(str);
-			return 1;
-		}
-	}
-	return 0;
-}
-
-static int lre_get_hsr_prp_node_info(char *interface, struct lre_node_s *node)
-{
-	int ret = 0, index = 0, marker_index = 1, param_index = INDEX_HSR_PRP_IF_NAME, len;
-	char *save, *token, *temp = (char *)malloc(strlen(interface) + 1);
-
-	if (!temp)
-		return -1;
-
-	/* Tokeniser below modify the interface buffer. So use a copy */
-	strcpy(temp, interface);
-	token = strtok_r(temp, " ", &save);
-	while (token) {
-		if (index == marker_index) {
-			/* interface name */
-			if (!strcmp(token, "slave1"))
-				marker_index = index + 1;
-			else {
-				len = strlen(token);
-				switch (param_index) {
-					case INDEX_HSR_PRP_IF_NAME:
-					     strcpy(node->if_name, token);
-					     if (len)
-						node->if_name[len-1] = '\0';
-					     param_index++;
-					     break;
-					case INDEX_HSR_PRP_MAC_ADDRESS:
-					     strcpy(node->mac_address, token);
-					     param_index++;
-					     break;
-					case INDEX_HSR_PRP_SLAVE1_IF_NAME:
-					     strcpy(node->slave1_if_name, token);
-					     param_index++;
-					     break;
-					case INDEX_HSR_PRP_SLAVE2_IF_NAME:
-					     strcpy(node->slave2_if_name, token);
-					     param_index++;
-					     break;
-					default:
-					     ;
-				};
-			}
-		}
-		if (!strcmp(token, "link/ether"))
-			marker_index = index + 1;
-
-		if (!strcmp(token, "prp") ||
-		    !strcmp(token, "hsr")) {
-			strcpy(node->type, token);
-			marker_index = index + 1;
-		}
-
-		if (!strcmp(token, "slave2"))
-			marker_index = index + 1;
-
-	        token = strtok_r(NULL, " ", &save);
-		index++;
-	}
-
-	if (param_index == INDEX_HSR_PRP_LAST)
-		ret = 1;
-
-        free(temp);
-	return ret;
-}
-
-#define LRE_CONFIG_MAX_INTERFACES	32
-#define LRE_CONFIG_BIFFER_SZ		1024
-
-static int lre_config_get_if_name_state(const char *interface,
-					 char *if_name,
-                                         int *admin_state,
-				         int *link_state)
-{
-     int ret = 0, index = 0, marker_index = 1,
-	 param_index = INDEX_IF_NAME, len;
-     char *save, *token, *temp = (char *)malloc(strlen(interface));
-
-     if (temp == NULL)
-		return -1;
-
-     /* Tokeniser below modify the interface buffer. So use a copy */
-     strcpy(temp, interface);
-     token = strtok_r(temp, " ", &save);
-     while (token) {
-         if (index == marker_index) {
-               /* interface name */
-	     len = strlen(token);
-	     switch (param_index) {
-                case INDEX_IF_NAME:
-		   strcpy(if_name, token);
-		   /* overwrite : with null */
-		   if (len)
-		       if_name[len-1] = '\0';
-		   param_index++;
-		   break;
-
-		case INDEX_ADMIN_STATE:
-		   /* if <UP> is not available, admin state is assumed to be
-		    * down
-		    */
-                   *admin_state = 0;
-		   if ((token[0] == '<') && (token[len-1] == '>')) {
-                       if (strstr(token, "UP"))
-				*admin_state = 1;
-		       else
-				*admin_state = 0;
-		       param_index++;
-	           }
-		   break;
-
-		case INDEX_LINK_STATE:
-		   *link_state = 0;
-		   if (strstr(token, "UP"))
-		       *link_state = 1;
-		   param_index++;
-		   break;
-		default:
-		   ;
-		}
-           }
-
-           if (!strcmp(token, "state"))
-		marker_index = index + 1;
-
-	   token = strtok_r(NULL, " ", &save);
-	   if ((index == INDEX_IF_NAME) ||
-	       (index == INDEX_ADMIN_STATE))
-		marker_index = index + 1;
-
-	   if (param_index == INDEX_LAST)
-	       break;
-
-	   index++;
-     }
-
-     free(temp);
-     return ret;
-}
-
-int lre_config_get_slave_states(const char *file_name,
-				const char *eth1_name,
-				int *eth1_admin_state,
-				int *eth1_link_state,
-				const char *eth2_name,
-				int *eth2_admin_state,
-				int *eth2_link_state)
-{
-    int ret = 0, if_index, eth1_found = 0, eth2_found = 0, admin_state = 0, link_state = 0;
-    char if_name[128];
-    char *interface;
-    char *line;
-    FILE *fp;
-
-    fp = fopen(file_name, "r");
-    if (fp == NULL)
-	return -1;
-
-    interface = (char *)malloc(LRE_CONFIG_BIFFER_SZ);
-    line = (char *)malloc(LRE_CONFIG_BIFFER_SZ);
-
-    if ((interface == NULL) || (line == NULL)) {
-	    printf("No memory\n");
-	    ret = -1;
-	    goto out;
-    }
-
-    while (!(eth1_found && eth2_found)) {
-           if (fgets(line, LRE_CONFIG_BIFFER_SZ, fp)) {
-               if (lre_prefix_string_ifindex(line, &if_index)) {
-                   ret = lre_config_get_if_name_state(line, if_name,
-                                                       &admin_state,
-						       &link_state);
-	           if (!ret) {
-		       if (!strcmp(if_name, eth1_name)) {
-                           eth1_found = 1;
-                           *eth1_admin_state = admin_state;
-		           *eth1_link_state = link_state;
-		       } else if (!strcmp(if_name, eth2_name)) {
-		           eth2_found = 1;
-                           *eth2_admin_state = admin_state;
-		           *eth2_link_state = link_state;
-		       }
-	           }
-               }
-           }
-    }
-
-out:
-    fclose(fp);
-    free(interface);
-    free(line);
-
-    return ret;
-}
-
-static int lre_config_get_num_interfaces(const char *file_name,
-                                         struct lre_nodes_s *nodes)
-{
-    int count = 0, ret = 0, last_if_index, if_index, done = 0, size, last_size = 0,
-	ifindex_found;
-    struct lre_nodes_s *prev = nodes, *current = nodes;
-    char *interface;
-    char *line;
-    FILE *fp;
-
-    system(ip_command);
-    fp = fopen(file_name, "r");
-    if (fp == NULL)
-	return -1;
-
-    interface = (char *)malloc(LRE_CONFIG_BIFFER_SZ);
-    line = (char *)malloc(LRE_CONFIG_BIFFER_SZ);
-    if ((interface == NULL) || (line == NULL)) {
-	    ret = -1;
-	    goto out;
-    }
-
-    while(!done) {
-        last_if_index = -1;
-        while (1) {
-            if (fgets(line, LRE_CONFIG_BIFFER_SZ, fp)) {
-                size = strlen(line);
-                if (lre_prefix_string_ifindex(line, &if_index)) {
-                    if (last_size) {
-                        interface[last_size] = '\0';
-                        if (lre_get_hsr_prp_node_info(interface, &current->data)) {
-                            current->data.if_index = last_if_index;
-                            /* parse upto LRE_CONFIG_MAX_INTERFACES interfaces
-			     * */
-                            if (++count < LRE_CONFIG_MAX_INTERFACES) {
-                                current->next =
-				(struct lre_nodes_s *)malloc(sizeof(struct lre_nodes_s));
-			        prev = current;
-			        current = current->next;
-                            } else
-				goto out;
-			}
-                    }
-
-                    bzero(interface, LRE_CONFIG_BIFFER_SZ);
-                    last_size = size;
-                    strcpy(interface, line);
-                    ifindex_found = 1;
-                    last_if_index = if_index;
-                } else {
-                    if (!ifindex_found) {
-                        /* error. Throw the string as this should never
-                         * happen
-                         */
-                        continue;
-                    }
-
-                    if ((last_size + size) <= (LRE_CONFIG_BIFFER_SZ  - 1)) {
-                        strcpy(&interface[last_size], line);
-                        last_size += size;
-                    } else {
-                        /* error */
-			ret = -1;
-			goto out;
-                    }
-                }
-            } else {
-                interface[last_size] = '\0';
-                if (lre_get_hsr_prp_node_info(interface, &current->data)) {
-                    current->data.if_index = last_if_index;
-		    current->next = NULL;
-		    count++;
-		} else {
-		    if (current != nodes) {
-			free(current);
-			prev->next = NULL;
-		    }
-		}
-                done = 1;
-                break;
-            }
-        }
-    }
-    ret = count;
-out:
-    fclose(fp);
-    free(interface);
-    free(line);
-    return ret;
-}
 
 int
 handle_lreInterfaceCount(netsnmp_mib_handler *handler,
@@ -390,7 +34,7 @@ handle_lreInterfaceCount(netsnmp_mib_handler *handler,
     switch(reqinfo->mode) {
         case MODE_GET:
 
-	    count = lre_config_get_num_interfaces(lre_interface_raw_file, &nodes);
+	    count = lre_config_get_num_interfaces(&nodes);
 	    if (count <= 0)
                 return SNMP_ERR_GENERR;
 
@@ -603,7 +247,7 @@ lreInterfaceConfigTable_container_load(netsnmp_container *container)
 {
     lreInterfaceConfigTable_rowreq_ctx *rowreq_ctx;
     struct lre_nodes_s nodes, *temp, *prev;
-    int lre_mac_address[6];
+    int lre_mac_address[6], hsr = 0;
     size_t count = 0;
     int ret;
 
@@ -627,7 +271,7 @@ lreInterfaceConfigTable_container_load(netsnmp_container *container)
     /*
      * open our data file.
      */
-    ret = lre_config_get_num_interfaces(lre_interface_raw_file, &nodes);
+    ret = lre_config_get_num_interfaces(&nodes);
 
     if(ret <= 0)
         return MFD_RESOURCE_UNAVAILABLE;
@@ -670,8 +314,7 @@ lreInterfaceConfigTable_container_load(netsnmp_container *container)
      */
     /** no mapping */
 
-    ret = lre_config_get_slave_states(lre_interface_raw_file,
-		                      temp->data.slave1_if_name,
+    ret = lre_config_get_slave_states(temp->data.slave1_if_name,
 				      &temp->data.slave1_admin_state,
 				      &temp->data.slave1_link_state,
 				      temp->data.slave2_if_name,
@@ -779,27 +422,38 @@ lreInterfaceConfigTable_container_load(netsnmp_container *container)
      * lreDuplicateDiscard(11)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
      */
     /** no mapping */
-    rowreq_ctx->data.lreDuplicateDiscard = LREDUPLICATEDISCARD_DISCARD;
+    if (rowreq_ctx->data.lreNodeType == LRENODETYPE_HSR)
+	    hsr = 1;
+
+    rowreq_ctx->data.lreDuplicateDiscard =
+	    snmp_access_lre_interface_param_get(NETSNMP_LRE_CONFIG_IFACE_DUPLICATE_DISCARD, hsr);
 
     /*
      * setup/save data for lreTransparentReception
      * lreTransparentReception(12)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
      */
     /** no mapping */
-    rowreq_ctx->data.lreTransparentReception = LRETRANSPARENTRECEPTION_REMOVERCT;
+    if (!hsr)
+	rowreq_ctx->data.lreTransparentReception =
+		snmp_access_lre_interface_param_get(NETSNMP_LRE_CONFIG_IFACE_TRANSPARENT_RECEPTION, hsr);
+    else
+	rowreq_ctx->data.lreTransparentReception = LRETRANSPARENTRECEPTION_REMOVERCT;
 
     /*
      * setup/save data for lreHsrLREMode
      * lreHsrLREMode(13)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
      */
     /** no mapping */
-    rowreq_ctx->data.lreHsrLREMode = LREHSRLREMODE_MODEH;
+    if (hsr)
+	rowreq_ctx->data.lreHsrLREMode = snmp_access_lre_interface_param_get(NETSNMP_LRE_CONFIG_IFACE_HSR_MODE, hsr);
+    else
+	rowreq_ctx->data.lreHsrLREMode = LREHSRLREMODE_MODEH;
     /*
      * setup/save data for lreSwitchingEndNode
      * lreSwitchingEndNode(14)/INTEGER/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
      */
     /** no mapping */
-    if (!strcmp(temp->data.type, "hsr"))
+    if (hsr)
         rowreq_ctx->data.lreSwitchingEndNode = LRESWITCHINGENDNODE_HSRNODE;
     else
         rowreq_ctx->data.lreSwitchingEndNode = LRESWITCHINGENDNODE_PRPNODE;
@@ -839,7 +493,8 @@ lreInterfaceConfigTable_container_load(netsnmp_container *container)
     /** no mapping */
 
     /* TODO */
-    rowreq_ctx->data.lreDupListResideMaxTime = 500;
+    rowreq_ctx->data.lreDupListResideMaxTime =
+	    snmp_access_lre_interface_param_get(NETSNMP_LRE_CONFIG_IFACE_DUP_LIST_RESIDE_MAX_TIME, hsr);
 
         /*
          * insert into table container
diff --git a/agent/mibgroup/IEC-62439-3-MIB/lre_config_interface.h b/agent/mibgroup/IEC-62439-3-MIB/lre_config_interface.h
index 4a3d1e4..b9b64a9 100644
--- a/agent/mibgroup/IEC-62439-3-MIB/lre_config_interface.h
+++ b/agent/mibgroup/IEC-62439-3-MIB/lre_config_interface.h
@@ -16,7 +16,46 @@ enum netsnmp_access_lre_config_file_index {
 	NETSNMP_LRE_CONFIG_IFACE_LAST,
 };
 
+/* for parsing hsr/prp interface parameters */
+enum lre_interface_param_index {
+	INDEX_HSR_PRP_IF_NAME,
+	INDEX_HSR_PRP_MAC_ADDRESS,
+	INDEX_HSR_PRP_SLAVE1_IF_NAME,
+	INDEX_HSR_PRP_SLAVE2_IF_NAME,
+	INDEX_HSR_PRP_LAST
+};
+
+struct lre_node_s {
+	int if_index;
+	char type[16];
+	char if_name[128];
+	char mac_address[32];
+	char slave1_if_name[128];
+        int slave1_admin_state;
+        int slave1_link_state;
+        char slave2_if_name[128];
+        int slave2_admin_state;
+        int slave2_link_state;
+};
+
+struct lre_nodes_s {
+	struct lre_node_s data;
+	struct lre_nodes_s *next;
+};
+
+/* for parsing interface parameters */
+enum lre_iface_param_index {
+	INDEX_IF_NAME,
+	INDEX_ADMIN_STATE,
+	INDEX_LINK_STATE,
+	INDEX_LAST
+};
+
 int snmp_access_lre_interface_param_get(enum netsnmp_access_lre_config_file_index index, int hsr);
 int snmp_access_lre_interface_param_set(enum netsnmp_access_lre_config_file_index index, int hsr, int val);
+int lre_config_get_num_interfaces(struct lre_nodes_s *nodes);
+int lre_config_get_slave_states(const char *eth1_name, int *eth1_admin_state,
+				int *eth1_link_state, const char *eth2_name, int *eth2_admin_state,
+				int *eth2_link_state);
 
 #endif
diff --git a/agent/mibgroup/IEC-62439-3-MIB/lre_config_interface_access.c b/agent/mibgroup/IEC-62439-3-MIB/lre_config_interface_access.c
index 1144fbf..b442337 100644
--- a/agent/mibgroup/IEC-62439-3-MIB/lre_config_interface_access.c
+++ b/agent/mibgroup/IEC-62439-3-MIB/lre_config_interface_access.c
@@ -27,7 +27,7 @@ int snmp_access_lre_interface_param_get(enum netsnmp_access_lre_config_file_inde
 	FILE *fp;
 	char line[1024];
 	char filename[128];
-	int val = -1, len;
+	int val = -1;
 	unsigned long long temp;
 
 	if (index >= NETSNMP_LRE_CONFIG_IFACE_LAST)
@@ -58,7 +58,6 @@ int snmp_access_lre_interface_param_get(enum netsnmp_access_lre_config_file_inde
 int snmp_access_lre_interface_param_set(enum netsnmp_access_lre_config_file_index index,
 				        int hsr, int val)
 {
-	int ret = 0;
 	FILE *fp;
 	char line[128];
 	char filename[128];
@@ -85,8 +84,327 @@ int snmp_access_lre_interface_param_set(enum netsnmp_access_lre_config_file_inde
 
 	snprintf(line, sizeof(line)-1, "%d", val);
 	line[sizeof(line)-1] = '\0';
-	ret = fwrite(line, sizeof(char), strlen(line), fp);
+	fwrite(line, sizeof(char), strlen(line), fp);
 	fclose(fp);
 
 	return 0;
 }
+
+#define lre_interface_raw_file "/var/ip_command_out.txt"
+#define ip_command "ip -d link 1>&2 >/var/ip_command_out.txt\n"
+
+static int lre_prefix_string_ifindex(const char *line, int *if_index)
+{
+	char str[32];
+	const char *ptr = line;
+	int count = 0;
+
+	bzero(str, sizeof(str));
+	if (!isdigit(*ptr))
+	return 0;
+
+	bzero(str, sizeof(str));
+	while(*ptr && (*ptr != ':')) {
+		if (!isdigit(*ptr))
+			break;
+		count++;
+		ptr++;
+	}
+
+	if (*ptr == ':') {
+		if (count && (count < sizeof(str))) {
+			while (count--) {
+			      str[count] = line[count];
+			}
+		}
+		if (strlen(str)) {
+			*if_index = atoi(str);
+			return 1;
+		}
+	}
+	return 0;
+}
+
+static int lre_get_hsr_prp_node_info(char *interface, struct lre_node_s *node)
+{
+	int ret = 0, index = 0, marker_index = 1, param_index = INDEX_HSR_PRP_IF_NAME, len;
+	char *save, *token, *temp = (char *)malloc(strlen(interface) + 1);
+
+	if (!temp)
+		return -1;
+
+	/* Tokeniser below modify the interface buffer. So use a copy */
+	strcpy(temp, interface);
+	token = strtok_r(temp, " ", &save);
+	while (token) {
+		if (index == marker_index) {
+			/* interface name */
+			if (!strcmp(token, "slave1"))
+				marker_index = index + 1;
+			else {
+				len = strlen(token);
+				switch (param_index) {
+					case INDEX_HSR_PRP_IF_NAME:
+					     strcpy(node->if_name, token);
+					     if (len)
+						node->if_name[len-1] = '\0';
+					     param_index++;
+					     break;
+					case INDEX_HSR_PRP_MAC_ADDRESS:
+					     strcpy(node->mac_address, token);
+					     param_index++;
+					     break;
+					case INDEX_HSR_PRP_SLAVE1_IF_NAME:
+					     strcpy(node->slave1_if_name, token);
+					     param_index++;
+					     break;
+					case INDEX_HSR_PRP_SLAVE2_IF_NAME:
+					     strcpy(node->slave2_if_name, token);
+					     param_index++;
+					     break;
+					default:
+					     ;
+				};
+			}
+		}
+		if (!strcmp(token, "link/ether"))
+			marker_index = index + 1;
+
+		if (!strcmp(token, "prp") ||
+		    !strcmp(token, "hsr")) {
+			strcpy(node->type, token);
+			marker_index = index + 1;
+		}
+
+		if (!strcmp(token, "slave2"))
+			marker_index = index + 1;
+
+	        token = strtok_r(NULL, " ", &save);
+		index++;
+	}
+
+	if (param_index == INDEX_HSR_PRP_LAST)
+		ret = 1;
+
+        free(temp);
+	return ret;
+}
+
+#define LRE_CONFIG_MAX_INTERFACES	32
+#define LRE_CONFIG_BIFFER_SZ		1024
+
+static int lre_config_get_if_name_state(const char *interface,
+					 char *if_name,
+                                         int *admin_state,
+				         int *link_state)
+{
+     int ret = 0, index = 0, marker_index = 1,
+	 param_index = INDEX_IF_NAME, len;
+     char *save, *token, *temp = (char *)malloc(strlen(interface));
+
+     if (temp == NULL)
+		return -1;
+
+     /* Tokeniser below modify the interface buffer. So use a copy */
+     strcpy(temp, interface);
+     token = strtok_r(temp, " ", &save);
+     while (token) {
+         if (index == marker_index) {
+               /* interface name */
+	     len = strlen(token);
+	     switch (param_index) {
+                case INDEX_IF_NAME:
+		   strcpy(if_name, token);
+		   /* overwrite : with null */
+		   if (len)
+		       if_name[len-1] = '\0';
+		   param_index++;
+		   break;
+
+		case INDEX_ADMIN_STATE:
+		   /* if <UP> is not available, admin state is assumed to be
+		    * down
+		    */
+                   *admin_state = 0;
+		   if ((token[0] == '<') && (token[len-1] == '>')) {
+                       if (strstr(token, "UP"))
+				*admin_state = 1;
+		       else
+				*admin_state = 0;
+		       param_index++;
+	           }
+		   break;
+
+		case INDEX_LINK_STATE:
+		   *link_state = 0;
+		   if (strstr(token, "UP"))
+		       *link_state = 1;
+		   param_index++;
+		   break;
+		default:
+		   ;
+		}
+           }
+
+           if (!strcmp(token, "state"))
+		marker_index = index + 1;
+
+	   token = strtok_r(NULL, " ", &save);
+	   if ((index == INDEX_IF_NAME) ||
+	       (index == INDEX_ADMIN_STATE))
+		marker_index = index + 1;
+
+	   if (param_index == INDEX_LAST)
+	       break;
+
+	   index++;
+     }
+
+     free(temp);
+     return ret;
+}
+
+int lre_config_get_slave_states(const char *eth1_name,
+				int *eth1_admin_state,
+				int *eth1_link_state,
+				const char *eth2_name,
+				int *eth2_admin_state,
+				int *eth2_link_state)
+{
+    int ret = 0, if_index, eth1_found = 0, eth2_found = 0, admin_state = 0, link_state = 0;
+    const char *file_name = lre_interface_raw_file;
+    char if_name[128];
+    char *line, *interface;
+    FILE *fp;
+
+    fp = fopen(file_name, "r");
+    if (fp == NULL)
+	return -1;
+
+    interface = (char *)malloc(LRE_CONFIG_BIFFER_SZ);
+    line = (char *)malloc(LRE_CONFIG_BIFFER_SZ);
+
+    if ((interface == NULL) || (line == NULL)) {
+	    printf("No memory\n");
+	    ret = -1;
+	    goto out;
+    }
+
+    while (!(eth1_found && eth2_found)) {
+           if (fgets(line, LRE_CONFIG_BIFFER_SZ, fp)) {
+               if (lre_prefix_string_ifindex(line, &if_index)) {
+                   ret = lre_config_get_if_name_state(line, if_name,
+                                                       &admin_state,
+						       &link_state);
+	           if (!ret) {
+		       if (!strcmp(if_name, eth1_name)) {
+                           eth1_found = 1;
+                           *eth1_admin_state = admin_state;
+		           *eth1_link_state = link_state;
+		       } else if (!strcmp(if_name, eth2_name)) {
+		           eth2_found = 1;
+                           *eth2_admin_state = admin_state;
+		           *eth2_link_state = link_state;
+		       }
+	           }
+               }
+           }
+    }
+
+out:
+    fclose(fp);
+    free(interface);
+    free(line);
+
+    return ret;
+}
+
+int lre_config_get_num_interfaces(struct lre_nodes_s *nodes)
+{
+    int count = 0, ret = 0, last_if_index, if_index, done = 0, size, last_size = 0,
+	ifindex_found;
+    struct lre_nodes_s *prev = nodes, *current = nodes;
+    const char *file_name = lre_interface_raw_file;
+    char *interface, *line;
+    FILE *fp;
+
+    system(ip_command);
+    fp = fopen(file_name, "r");
+    if (fp == NULL)
+	return -1;
+
+    interface = (char *)malloc(LRE_CONFIG_BIFFER_SZ);
+    line = (char *)malloc(LRE_CONFIG_BIFFER_SZ);
+    if ((interface == NULL) || (line == NULL)) {
+	    ret = -1;
+	    goto out;
+    }
+
+    while(!done) {
+        last_if_index = -1;
+        while (1) {
+            if (fgets(line, LRE_CONFIG_BIFFER_SZ, fp)) {
+                size = strlen(line);
+                if (lre_prefix_string_ifindex(line, &if_index)) {
+                    if (last_size) {
+                        interface[last_size] = '\0';
+                        if (lre_get_hsr_prp_node_info(interface, &current->data)) {
+                            current->data.if_index = last_if_index;
+                            /* parse upto LRE_CONFIG_MAX_INTERFACES interfaces
+			     * */
+                            if (++count < LRE_CONFIG_MAX_INTERFACES) {
+                                current->next =
+				(struct lre_nodes_s *)malloc(sizeof(struct lre_nodes_s));
+			        prev = current;
+			        current = current->next;
+                            } else
+				goto out;
+			}
+                    }
+
+                    bzero(interface, LRE_CONFIG_BIFFER_SZ);
+                    last_size = size;
+                    strcpy(interface, line);
+                    ifindex_found = 1;
+                    last_if_index = if_index;
+                } else {
+                    if (!ifindex_found) {
+                        /* error. Throw the string as this should never
+                         * happen
+                         */
+                        continue;
+                    }
+
+                    if ((last_size + size) <= (LRE_CONFIG_BIFFER_SZ  - 1)) {
+                        strcpy(&interface[last_size], line);
+                        last_size += size;
+                    } else {
+                        /* error */
+			ret = -1;
+			goto out;
+                    }
+                }
+            } else {
+                interface[last_size] = '\0';
+                if (lre_get_hsr_prp_node_info(interface, &current->data)) {
+                    current->data.if_index = last_if_index;
+		    current->next = NULL;
+		    count++;
+		} else {
+		    if (current != nodes) {
+			free(current);
+			prev->next = NULL;
+		    }
+		}
+                done = 1;
+                break;
+            }
+        }
+    }
+    ret = count;
+out:
+    fclose(fp);
+    free(interface);
+    free(line);
+    return ret;
+}
-- 
1.9.1

